name: test-ssh-remote
on:
  workflow_dispatch:

jobs:
  test-ssh:
    # ถ้าใช้ GitHub-hosted ให้เป็น ubuntu-latest
    # ถ้าใช้ VM หลัง NAT แล้วต้องชี้ 127.0.0.1:2222 ให้ใช้ self-hosted
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PORT: ${{ secrets.SSH_PORT }}

    steps:
      - name: Prepare SSH key (handle CRLF) 
        run: |
          mkdir -p ~/.ssh
          # เอา \r ออกกันปัญหา CRLF ใน secret แล้วเซฟเป็น id_ed25519
          printf '%s\n' "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keygen -lf ~/.ssh/id_ed25519 || true

      - name: Test via OpenSSH (เหมือนต่อจากเทอร์มินัล)
        run: |
          ssh -p "${SSH_PORT:-22}" \
              -i ~/.ssh/id_ed25519 \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ServerAliveInterval=10 \
              -o ServerAliveCountMax=3 \
              "$SSH_USER@$SSH_HOST" \
              "echo ✅ OpenSSH OK; whoami; hostname; ip -4 addr | grep -m1 'inet ' || true"

      # (ตัวเลือก) ใช้ action สำเร็จรูปด้วยพารามิเตอร์เดียวกัน
      - name: Test via appleboy/ssh-action
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          port: ${{ env.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "✅ appleboy OK"
            whoami
            hostname
            ip -4 addr | grep -m1 'inet ' || true
