name: CI-CD

on:
  pull_request:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: "deploy-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  # ---------- CI ----------
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install deps (clean)
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Unit tests
        run: npm test --if-present

      - name: Build (optional)
        run: npm run build --if-present

  # ---------- Build & Push Docker to GHCR ----------
  docker:
    if: github.event_name == 'push'
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Ensure lowercased image name (for GHCR)
        run: echo "IMAGE_NAME_LC=${IMAGE_NAME,,}" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}
          tags: |
            type=ref,event=branch
            type=sha
            type=semver,pattern={{version}}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./DockerFile          
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # ---------- Deploy to EC2 via Docker Compose ----------
  deploy:
    if: github.event_name == 'push'
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Copy compose file
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: |
            docker-compose.yml
          target: "~/app"

      - name: Deploy with compose
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}

          envs: GHCR_PAT,GITHUB_ACTOR

          script: |
            set -e
            cd ~/app
            if [ -n "${{ secrets.GHCR_PAT }}" ]; then
              echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            fi
            set -euo pipefail
            echo "== Check & install Docker =="
            if ! command -v docker >/dev/null 2>&1; then
              # Install Docker CE + compose plugin
              sudo apt-get update -y
              sudo apt-get install -y ca-certificates curl gnupg lsb-release
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            fi

            echo "== Enable & start docker =="
            sudo systemctl enable --now docker

            echo "== Who am I and groups =="
            id
            # ถ้าไม่ใช่ root ให้เพิ่ม user นี้เข้ากลุ่ม docker (เพื่อใช้ docker โดยไม่ต้อง sudo ครั้งต่อไป)
            if ! groups | grep -q "\bdocker\b"; then
              sudo usermod -aG docker "$USER" || true
              echo ">> Added $USER to docker group (ต้อง re-login รอบหน้าเพื่อมีผล)"
            fi

            echo "== Check daemon =="
            sudo systemctl status docker --no-pager || true
            docker version
            docker info | sed -n '1,40p'

            echo "== Login GHCR (ถ้าภาพ private) =="
            if [ -n "${GHCR_PAT:-}" ]; then
              echo "$GHCR_PAT" | docker login ghcr.io -u "${GITHUB_ACTOR:-github-actions}" --password-stdin
            fi

            echo "== Go to app folder & pull/up =="
            mkdir -p ~/app
            cd ~/app

            docker compose pull
            docker compose up -d

            echo "== Prune old images =="
            docker image prune -f

            sudo docker compose pull || docker-compose pull
            sudo docker compose up -d || docker-compose up -d
            sudo docker image prune -f

  # ---------- Optional: Post-Deploy Integration Test ----------
  post-deploy-test:
    if: github.event_name == 'push'
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Wait for service to be ready
        run: |
          for i in {1..30}; do
            if curl -fsS "${{ secrets.APP_URL }}/api/health" | grep -q '"ok":true'; then
              echo "Service healthy"
              exit 0
            fi
            echo "Waiting... ($i)"
            sleep 5
          done
          echo "Service NOT healthy" && exit 1
